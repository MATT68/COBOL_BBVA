   Día: 2020-04-03
   -----------------------------------
   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
   
 SELECT ....
   FROM EMPLE E [INNER] JOIN DEPART D
     ON D._____  = E._______
  WHERE E.FX_ALTA > '.....'      

 SELECT ....
   FROM EMPLE E LEFT [OUTER] JOIN DEPART D
     ON E._____  =  D._______
  WHERE E.FX_ALTA > '.....'      

 SELECT ....
   FROM DEPART D LEFT [OUTER] JOIN EMPLE E
     ON E._____  =  D._______
  WHERE E.FX_ALTA > '.....'      

----------- DEPENDIENDO DE LO QUE RELLENEMOS EN LA CLÁUSULA ON
----------- ESTAREMOS BUSCANDO UNA INFORMACIÓN U OTRA

 SELECT ....
   FROM EMPLE E [INNER] JOIN DEPART D
     ON D.CO_DEPT  =  E.CO_DEPT
  WHERE E.FX_ALTA > '.....'      ;

 SELECT ....
   FROM EMPLE E [INNER] JOIN DEPART D
     ON D.NU_DIRECTOR = E.NU_EMPL 
  WHERE E.FX_ALTA > '.....'      ;

   
   Día: 2020-04-02
   -----------------------------------
   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
   
     SELECT ...
      FROM COMPCLIE
     WHERE AÑO_DOS_ANT  > AÑO_TRES_ANT
     AND   AÑO_TRES_ANT > AÑO_CUATRO_ANT
     ( No poner nunca nunca nunca dentro de un programa 'de gestión normalito'! )
     
   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
   UDT (User-Defined Distinct Data Types)
    CREATE DISTINCT TYPE EURO AS DECIMAL(9,2);
    
    UDF (User-Defined Function):
     -- Automáticamente se crean dos UDF para convertir de EURO a DECIMAL(9,2)
     -- y de DECIMAL(9,2) a EURO.
     EURO(DECIMAL(9,2)) ==>  EURO         (Tipo de dato)
     DECIMAL(EURO)      ==>  DECIMAL(m,n) (Tipo de dato)
     -- El resto de funciones debemos definirlas:
     Por ejemplo, caso X, más abajo.
     
    CREATE TABLE VENDEDOR
      ( CO_VENDEDOR       CHAR(8)   NOT NULL, 
        APELLIDO1         CHAR(20)  NOT NULL,
        ...
        ...
        SALARIO           EURO      NOT NULL, 
        COMISION          EURO      ,
        ... );
        
      SELECT ...
       FROM VENDEDOR
      WHERE SALARIO > EURO(18500,00);
             EURO      EURO(DECIMAL(7,2))
      -- ?? WHERE FX_CONTRAT > 2020,23 ??? NO FUNCIONA PORQUE SON TIPOS DE DATO DIFERENTE
      
      -- CASO X:
      SELECT CO_VENDEDOR, SALARIO + COMISION
       FROM VENDEDOR
      ===> KASKA!?   ==>  No está definida la función '+' para tipo de dato EURO.
      -- Posible solución (de tipo ñapa). 
      SELECT CO_VENDEDOR, DECIMAL(SALARIO) + DECIMAL(COMISION)
       FROM VENDEDOR
      
    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX



   Día: 2020-04-01
   -----------------------------------
   
   Cómo almacena DB2 la información de los campos DECIMAL(p,a) en disco?
   Se almacena en formato PACKED DECIMAL.
   DECIMAL(8,2)    
   Representación visual                           Representacion HEX
   ---------------------                           ------------------
      + 012345,27       ==>    00 12 34 52 7C  ==>    X'001243527C'
      - 012345,27       ==>    00 12 34 52 7D  ==>    X'001243527D'
    
    
   Cómo se almacenan los campos numéricos binarios?
   Representación visual                   Almacenamiento en disco                             Representacion HEX
   ---------------------                   -----------------------                             ------------------
      12  (dos  bytes)                       0000 1100  (1 byte - 8 bits)                       X'0C'
      255 (tres bytes)                       1111 1111  (1 byte - 8 bits)                       X'FF'
     65535 (cinco bytes)                    1111 1111 1111 1111  (2 bytes - 16 bits)            X'FFFF'
      44471 (cinco bytes)                   1010 1101 1011 0111  (2 bytes - 16 bits)            X'ADB7'
    
   
   
   
   
   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
   FUNCION COALESCE: COALESCE(COL1, COL2, COL3, 'VACIO')  => Devuelve la primera columna no nula.
   
   FUNCION ESPECÍFICA ORACLE: NVL(A,B) ó si tienes tres argumentos:  NVL2(A,B,C)
   
   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
   Esquemas de codificación de caracteres:
   ASCII   => Unix, Linux, Windows, etc. 
   EBCDIC  => Mainframes IBM (z/OS, ...)
     
     IÑIGO =>  ASCII/EBCDIC necesitan un Mapa del país/idioma .
       IÑIGO => ASCII(+1145 - Latin spanish) => X'C97BC9C7D6' => ASCII(+1145 - Latin spanish) => IÑIGO
       IÑIGO => ASCII(+1145 - Latin spanish) => X'C97BC9C7D6' => ASCII(+1141 - Central Austria) => I#IGO
     ....
       
   UNICODE => Esquema de codificación de caracteres
       IÑIGO => UNICODE (UTF-8) => X'49C39149474F' => UNICODE (UTF-8) - Central Austria) => IÑIGO
       X (1 ideograma) => UNICODE (UTF-8)  => X'C391D3' 
       Asiáticos: UTF-16
       X (1 ideograma) => UNICODE (UTF-16) => X'D1C2' 
....
   
   Resta de fechas (DATETIME) da como resultado "Date Duration":
   SELECT FX_COMPRA - FX_ALTA  ...
        RESULTADO: 00000101   (yyyymmdd)  0000 años, 01 mes y 01 día
   
   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   
   FUNCIONES Y OPERACIONES :  NO SE DEBEN USAR EN LA CLÁUSULA WHERE !!! 
   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
   
   LOB  =>  Large OBject (10 años de viejunía)
    
   CLOB => CHARACTER LOB
   BLOB => BINARY   LOB
   DBCLOB => "ideogramas" LOB

   LOB Extenders => funciones para insertar, actualizar LOBs
   -------------------------------------------------------------
   
 TIMESTAMP --> YYYY-MM-DD-HH.MM.SS.MMMMMM
   
   CLIENTES:
    NU_CLIENTE     NOMBRE   APELLIDO1 .....  USER    PROGRAM    TIME_STAMP
       X             X          X             ?         ?            ?
   
   ? = Auditoría
   
   UPDATE CLIENTES
     SET COL1 =  ...,
         COL2 =  ...,
         USER      =     ,
         PROGRAM   =     ,
         TIMESTAMP =  CURRENT TIMESTAMP   (SPECIAL REGISTER )
     WHERE NU_CLIENTE = ...
   
   
   
   --  
    SELECT ...
      FROM FORMA2.CLIENTES
    WHERE
    
    -- MySQL  => Base de datos, SCHEMA
    -- Oracle => User, SCHEMA
    -- DB2    => Owner, propietario, SCHEMA 

    MySQL Workbench
    Oracle Developer
    Microsoft SQL Studio
    DBeaver
    DB2 Data Studio

    SELECT ....
      FROM CLIENTES
    WHERE  TIPO IN ('A1','A2','B4');

    SELECT ....
      FROM CLIENTES
    WHERE  TIPO = 'A1'
       OR  TIPO = 'A2'
       OR  TIPO = 'B4';

     SELECT ....
      FROM CLIENTES
     WHERE NOMBRE = 'MATIAS' 
        OR NOMBRE = 'Matías'
        OR NOMBRE = 'Matias'
        OR NOMBRE = 'MATÍAS' 
        OR NOMBRE = 'maTías'
 
 Estandarizar:  MATIAS <=== 'Matías' <== 'Matias' <== 'MATÍAS' 
 Para poder buscar sólo con esta sentencia:

   SELECT ....
     FROM CLIENTES
    WHERE NOMBRE = 'MATIAS'
  
 CPU   = € € € €
